using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;

namespace GGs.Shared.SystemIntelligence;

/// <summary>
/// Enterprise cloud profile manager with tier-based limits and sharing capabilities
/// </summary>
public class CloudProfileManager
{
    private readonly ILogger<CloudProfileManager>? _logger;
    private readonly CloudStorageService _cloudStorage;
    private readonly ProfileEncryption _encryption;
    private readonly TierLimitValidator _tierValidator;
    private readonly SharingPermissionManager _sharingManager;

    public CloudProfileManager(ILogger<CloudProfileManager>? logger = null)
    {
        _logger = logger;
        _cloudStorage = new CloudStorageService();
        _encryption = new ProfileEncryption();
        _tierValidator = new TierLimitValidator();
        _sharingManager = new SharingPermissionManager();
    }

    /// <summary>
    /// Save a system intelligence profile to the cloud with tier validation
    /// </summary>
    public async Task<CloudProfileSaveResult> SaveProfileAsync(
        SystemIntelligenceProfile profile, 
        string userId, 
        LicenseTier userTier,
        CloudProfileMetadata metadata)
    {
        _logger?.LogInformation("Saving profile {ProfileName} for user {UserId} with tier {Tier}", 
            profile.ProfileName, userId, userTier);

        var result = new CloudProfileSaveResult
        {
            ProfileId = Guid.NewGuid(),
            UserId = userId,
            ProfileName = profile.ProfileName,
            SavedAt = DateTime.UtcNow,
            Success = false
        };

        try
        {
            // Validate tier limits
            var tierValidation = await _tierValidator.ValidateSaveLimitsAsync(userId, userTier);
            if (!tierValidation.CanSave)
            {
                result.ErrorMessage = tierValidation.LimitMessage;
                result.CurrentSaveCount = tierValidation.CurrentSaveCount;
                result.MaxSaveCount = tierValidation.MaxSaveCount;
                return result;
            }

            // Prepare profile for cloud storage
            var cloudProfile = await PrepareProfileForCloudAsync(profile, metadata, result.ProfileId);

            // Encrypt sensitive data
            var encryptedProfile = await _encryption.EncryptProfileAsync(cloudProfile, userId);

            // Upload to cloud storage
            var uploadResult = await _cloudStorage.UploadProfileAsync(encryptedProfile, userId);
            if (!uploadResult.Success)
            {
                result.ErrorMessage = $"Cloud upload failed: {uploadResult.ErrorMessage}";
                return result;
            }

            // Update user's profile registry
            await UpdateUserProfileRegistryAsync(userId, result.ProfileId, cloudProfile);

            // Set sharing permissions if specified
            if (metadata.SharingPermission != SharingPermission.Private)
            {
                await _sharingManager.SetSharingPermissionsAsync(result.ProfileId, metadata.SharingPermission, metadata.SharingTags);
            }

            result.Success = true;
            result.CloudUrl = uploadResult.CloudUrl;
            result.ProfileSize = uploadResult.ProfileSize;
            result.CurrentSaveCount = tierValidation.CurrentSaveCount + 1;
            result.MaxSaveCount = tierValidation.MaxSaveCount;

            _logger?.LogInformation("Profile {ProfileId} saved successfully for user {UserId}", result.ProfileId, userId);
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Failed to save profile {ProfileName} for user {UserId}", profile.ProfileName, userId);
            result.ErrorMessage = $"Save failed: {ex.Message}";
        }

        return result;
    }

    /// <summary>
    /// Load a system intelligence profile from the cloud
    /// </summary>
    public async Task<CloudProfileLoadResult> LoadProfileAsync(Guid profileId, string userId)
    {
        _logger?.LogInformation("Loading profile {ProfileId} for user {UserId}", profileId, userId);

        var result = new CloudProfileLoadResult
        {
            ProfileId = profileId,
            UserId = userId,
            Success = false
        };

        try
        {
            // Verify user has access to this profile
            var hasAccess = await VerifyProfileAccessAsync(profileId, userId);
            if (!hasAccess)
            {
                result.ErrorMessage = "Access denied to this profile";
                return result;
            }

            // Download from cloud storage
            var downloadResult = await _cloudStorage.DownloadProfileAsync(profileId, userId);
            if (!downloadResult.Success)
            {
                result.ErrorMessage = $"Cloud download failed: {downloadResult.ErrorMessage}";
                return result;
            }

            // Decrypt profile data
            var decryptedProfile = await _encryption.DecryptProfileAsync(downloadResult.EncryptedData, userId);

            // Convert back to SystemIntelligenceProfile
            result.Profile = await ConvertFromCloudProfileAsync(decryptedProfile);
            result.Metadata = decryptedProfile.Metadata;
            result.LoadedAt = DateTime.UtcNow;
            result.Success = true;

            _logger?.LogInformation("Profile {ProfileId} loaded successfully for user {UserId}", profileId, userId);
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Failed to load profile {ProfileId} for user {UserId}", profileId, userId);
            result.ErrorMessage = $"Load failed: {ex.Message}";
        }

        return result;
    }

    /// <summary>
    /// Get all profiles for a user with metadata
    /// </summary>
    public async Task<List<CloudProfileSummary>> GetUserProfilesAsync(string userId)
    {
        _logger?.LogDebug("Getting profiles for user {UserId}", userId);

        try
        {
            var profileRegistry = await _cloudStorage.GetUserProfileRegistryAsync(userId);
            var summaries = new List<CloudProfileSummary>();

            foreach (var entry in profileRegistry.Profiles)
            {
                var summary = new CloudProfileSummary
                {
                    ProfileId = entry.ProfileId,
                    ProfileName = entry.ProfileName,
                    CreatedAt = entry.CreatedAt,
                    LastModified = entry.LastModified,
                    ProfileSize = entry.ProfileSize,
                    TweakCount = entry.TweakCount,
                    SharingPermission = entry.SharingPermission,
                    Tags = entry.Tags,
                    SystemInfo = entry.SystemInfo
                };

                summaries.Add(summary);
            }

            return summaries.OrderByDescending(s => s.LastModified).ToList();
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Failed to get profiles for user {UserId}", userId);
            return new List<CloudProfileSummary>();
        }
    }

    /// <summary>
    /// Delete a profile from the cloud
    /// </summary>
    public async Task<bool> DeleteProfileAsync(Guid profileId, string userId)
    {
        _logger?.LogInformation("Deleting profile {ProfileId} for user {UserId}", profileId, userId);

        try
        {
            // Verify ownership
            var hasAccess = await VerifyProfileOwnershipAsync(profileId, userId);
            if (!hasAccess)
            {
                _logger?.LogWarning("User {UserId} attempted to delete profile {ProfileId} without ownership", userId, profileId);
                return false;
            }

            // Remove from cloud storage
            var deleteResult = await _cloudStorage.DeleteProfileAsync(profileId, userId);
            if (!deleteResult.Success)
            {
                _logger?.LogError("Failed to delete profile {ProfileId} from cloud storage: {Error}", profileId, deleteResult.ErrorMessage);
                return false;
            }

            // Remove from user's profile registry
            await RemoveFromUserProfileRegistryAsync(userId, profileId);

            // Remove sharing permissions
            await _sharingManager.RemoveSharingPermissionsAsync(profileId);

            _logger?.LogInformation("Profile {ProfileId} deleted successfully for user {UserId}", profileId, userId);
            return true;
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Failed to delete profile {ProfileId} for user {UserId}", profileId, userId);
            return false;
        }
    }

    /// <summary>
    /// Search for shared profiles in the community
    /// </summary>
    public async Task<List<SharedProfileResult>> SearchSharedProfilesAsync(
        string searchQuery, 
        List<string>? tags = null, 
        SharingPermission? permission = null,
        int maxResults = 50)
    {
        _logger?.LogDebug("Searching shared profiles with query: {Query}", searchQuery);

        try
        {
            var searchCriteria = new ProfileSearchCriteria
            {
                Query = searchQuery,
                Tags = tags ?? new List<string>(),
                Permission = permission,
                MaxResults = maxResults,
                IncludeMetadata = true
            };

            var searchResults = await _cloudStorage.SearchSharedProfilesAsync(searchCriteria);
            var results = new List<SharedProfileResult>();

            foreach (var result in searchResults)
            {
                var sharedProfile = new SharedProfileResult
                {
                    ProfileId = result.ProfileId,
                    ProfileName = result.ProfileName,
                    Description = result.Description,
                    CreatedBy = result.CreatedBy,
                    CreatedAt = result.CreatedAt,
                    TweakCount = result.TweakCount,
                    DownloadCount = result.DownloadCount,
                    Rating = result.Rating,
                    Tags = result.Tags,
                    SystemCompatibility = result.SystemCompatibility,
                    PreviewTweaks = result.PreviewTweaks
                };

                results.Add(sharedProfile);
            }

            return results.OrderByDescending(r => r.Rating).ThenByDescending(r => r.DownloadCount).ToList();
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Failed to search shared profiles with query: {Query}", searchQuery);
            return new List<SharedProfileResult>();
        }
    }

    /// <summary>
    /// Download a shared profile from the community
    /// </summary>
    public async Task<CloudProfileLoadResult> DownloadSharedProfileAsync(Guid profileId, string userId)
    {
        _logger?.LogInformation("Downloading shared profile {ProfileId} for user {UserId}", profileId, userId);

        var result = new CloudProfileLoadResult
        {
            ProfileId = profileId,
            UserId = userId,
            Success = false
        };

        try
        {
            // Verify profile is shared and accessible
            var sharingInfo = await _sharingManager.GetSharingInfoAsync(profileId);
            if (sharingInfo == null || sharingInfo.Permission == SharingPermission.Private)
            {
                result.ErrorMessage = "Profile is not available for sharing";
                return result;
            }

            // Download the shared profile
            var downloadResult = await _cloudStorage.DownloadSharedProfileAsync(profileId);
            if (!downloadResult.Success)
            {
                result.ErrorMessage = $"Failed to download shared profile: {downloadResult.ErrorMessage}";
                return result;
            }

            // Convert to SystemIntelligenceProfile
            result.Profile = await ConvertFromCloudProfileAsync(downloadResult.ProfileData);
            result.Metadata = downloadResult.ProfileData.Metadata;
            result.LoadedAt = DateTime.UtcNow;
            result.Success = true;

            // Update download count
            await _cloudStorage.IncrementDownloadCountAsync(profileId);

            _logger?.LogInformation("Shared profile {ProfileId} downloaded successfully for user {UserId}", profileId, userId);
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Failed to download shared profile {ProfileId} for user {UserId}", profileId, userId);
            result.ErrorMessage = $"Download failed: {ex.Message}";
        }

        return result;
    }

    private async Task<CloudProfile> PrepareProfileForCloudAsync(
        SystemIntelligenceProfile profile, 
        CloudProfileMetadata metadata, 
        Guid profileId)
    {
        var cloudProfile = new CloudProfile
        {
            ProfileId = profileId,
            ProfileName = profile.ProfileName,
            Description = metadata.Description,
            CreatedAt = DateTime.UtcNow,
            LastModified = DateTime.UtcNow,
            SystemInfo = (profile.SystemInfo as SystemInfo) ?? new SystemInfo(),
            DetectedTweaks = profile.DetectedTweaks,
            ScanResults = (profile.ScanResults as ScanResults) ?? new ScanResults(),
            Metadata = metadata,
            ProfileSize = CalculateProfileSize(profile),
            TweakCount = profile.DetectedTweaks.Count,
            Tags = metadata.Tags ?? new List<string>()
        };

        return cloudProfile;
    }

    private long CalculateProfileSize(SystemIntelligenceProfile profile)
    {
        var json = JsonSerializer.Serialize(profile);
        return System.Text.Encoding.UTF8.GetByteCount(json);
    }

    private async Task<bool> VerifyProfileAccessAsync(Guid profileId, string userId)
    {
        // Check if user owns the profile or has access through sharing
        var ownership = await VerifyProfileOwnershipAsync(profileId, userId);
        if (ownership) return true;

        var sharingInfo = await _sharingManager.GetSharingInfoAsync(profileId);
        return sharingInfo != null && sharingInfo.Permission != SharingPermission.Private;
    }

    private async Task<bool> VerifyProfileOwnershipAsync(Guid profileId, string userId)
    {
        var registry = await _cloudStorage.GetUserProfileRegistryAsync(userId);
        return registry.Profiles.Any(p => p.ProfileId == profileId);
    }

    private async Task UpdateUserProfileRegistryAsync(string userId, Guid profileId, CloudProfile profile)
    {
        var registry = await _cloudStorage.GetUserProfileRegistryAsync(userId);
        
        var entry = new ProfileRegistryEntry
        {
            ProfileId = profileId,
            ProfileName = profile.ProfileName,
            CreatedAt = profile.CreatedAt,
            LastModified = profile.LastModified,
            ProfileSize = profile.ProfileSize,
            TweakCount = profile.TweakCount,
            SharingPermission = profile.Metadata.SharingPermission,
            Tags = profile.Tags,
            SystemInfo = profile.SystemInfo
        };

        registry.Profiles.Add(entry);
        await _cloudStorage.UpdateUserProfileRegistryAsync(userId, registry);
    }

    private async Task RemoveFromUserProfileRegistryAsync(string userId, Guid profileId)
    {
        var registry = await _cloudStorage.GetUserProfileRegistryAsync(userId);
        registry.Profiles.RemoveAll(p => p.ProfileId == profileId);
        await _cloudStorage.UpdateUserProfileRegistryAsync(userId, registry);
    }

    private async Task<SystemIntelligenceProfile> ConvertFromCloudProfileAsync(CloudProfile cloudProfile)
    {
        return new SystemIntelligenceProfile
        {
            ProfileId = cloudProfile.ProfileId,
            Name = cloudProfile.ProfileName,
            CreatedAt = cloudProfile.CreatedAt,
            SystemInfo = cloudProfile.SystemInfo,
            DetectedTweaks = cloudProfile.DetectedTweaks,
            ScanResults = cloudProfile.ScanResults,
            Status = CloudProfileStatus.Loaded
        };
    }
}

/// <summary>
/// Cloud profile with metadata for storage
/// </summary>
public class CloudProfile
{
    public Guid ProfileId { get; set; }
    public string ProfileName { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public DateTime CreatedAt { get; set; }
    public DateTime LastModified { get; set; }
    public SystemInfo SystemInfo { get; set; } = new();
    public List<DetectedTweak> DetectedTweaks { get; set; } = new();
    public ScanResults ScanResults { get; set; } = new();
    public CloudProfileMetadata Metadata { get; set; } = new();
    public long ProfileSize { get; set; }
    public int TweakCount { get; set; }
    public List<string> Tags { get; set; } = new();
}

/// <summary>
/// Metadata for cloud profiles
/// </summary>
public class CloudProfileMetadata
{
    public string Description { get; set; } = string.Empty;
    public SharingPermission SharingPermission { get; set; } = SharingPermission.Private;
    public List<string>? Tags { get; set; }
    public List<string>? SharingTags { get; set; }
    public string? Category { get; set; }
    public bool AllowComments { get; set; } = true;
    public bool AllowRating { get; set; } = true;
    public Dictionary<string, object> CustomMetadata { get; set; } = new();
}

/// <summary>
/// Result of saving a profile to the cloud
/// </summary>
public class CloudProfileSaveResult
{
    public Guid ProfileId { get; set; }
    public string UserId { get; set; } = string.Empty;
    public string ProfileName { get; set; } = string.Empty;
    public DateTime SavedAt { get; set; }
    public bool Success { get; set; }
    public string? ErrorMessage { get; set; }
    public string? CloudUrl { get; set; }
    public long ProfileSize { get; set; }
    public int CurrentSaveCount { get; set; }
    public int MaxSaveCount { get; set; }
}

/// <summary>
/// Result of loading a profile from the cloud
/// </summary>
public class CloudProfileLoadResult
{
    public Guid ProfileId { get; set; }
    public string UserId { get; set; } = string.Empty;
    public DateTime LoadedAt { get; set; }
    public bool Success { get; set; }
    public string? ErrorMessage { get; set; }
    public SystemIntelligenceProfile? Profile { get; set; }
    public CloudProfileMetadata? Metadata { get; set; }
}

/// <summary>
/// Summary of a cloud profile
/// </summary>
public class CloudProfileSummary
{
    public Guid ProfileId { get; set; }
    public string ProfileName { get; set; } = string.Empty;
    public DateTime CreatedAt { get; set; }
    public DateTime LastModified { get; set; }
    public long ProfileSize { get; set; }
    public int TweakCount { get; set; }
    public SharingPermission SharingPermission { get; set; }
    public List<string> Tags { get; set; } = new();
    public SystemInfo SystemInfo { get; set; } = new();
}

/// <summary>
/// Shared profile search result
/// </summary>
public class SharedProfileResult
{
    public Guid ProfileId { get; set; }
    public string ProfileName { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public string CreatedBy { get; set; } = string.Empty;
    public DateTime CreatedAt { get; set; }
    public int TweakCount { get; set; }
    public int DownloadCount { get; set; }
    public double Rating { get; set; }
    public List<string> Tags { get; set; } = new();
    public SystemInfo SystemCompatibility { get; set; } = new();
    public List<DetectedTweak> PreviewTweaks { get; set; } = new();
}

/// <summary>
/// Profile registry entry
/// </summary>
public class ProfileRegistryEntry
{
    public Guid ProfileId { get; set; }
    public string ProfileName { get; set; } = string.Empty;
    public DateTime CreatedAt { get; set; }
    public DateTime LastModified { get; set; }
    public long ProfileSize { get; set; }
    public int TweakCount { get; set; }
    public SharingPermission SharingPermission { get; set; }
    public List<string> Tags { get; set; } = new();
    public SystemInfo SystemInfo { get; set; } = new();
}

/// <summary>
/// User profile registry
/// </summary>
public class UserProfileRegistry
{
    public string UserId { get; set; } = string.Empty;
    public List<ProfileRegistryEntry> Profiles { get; set; } = new();
    public DateTime LastUpdated { get; set; }
}

/// <summary>
/// Tier limit validation
/// </summary>
public class TierLimitValidator
{
    public async Task<TierValidationResult> ValidateSaveLimitsAsync(string userId, LicenseTier tier)
    {
        var currentCount = await GetCurrentSaveCountAsync(userId);
        var maxCount = GetMaxSaveCountForTier(tier);

        return new TierValidationResult
        {
            CanSave = currentCount < maxCount,
            CurrentSaveCount = currentCount,
            MaxSaveCount = maxCount,
            LimitMessage = currentCount >= maxCount ? $"Save limit reached. {tier} tier allows {maxCount} saved profiles." : null
        };
    }

    private async Task<int> GetCurrentSaveCountAsync(string userId)
    {
        // Implementation would query actual storage
        await Task.Delay(10);
        return 0;
    }

    private int GetMaxSaveCountForTier(LicenseTier tier)
    {
        return tier switch
        {
            LicenseTier.Pro => 2,
            LicenseTier.Enterprise => 5,
            _ => 0
        };
    }
}

/// <summary>
/// Tier validation result
/// </summary>
public class TierValidationResult
{
    public bool CanSave { get; set; }
    public int CurrentSaveCount { get; set; }
    public int MaxSaveCount { get; set; }
    public string? LimitMessage { get; set; }
}

/// <summary>
/// Cloud storage service interface
/// </summary>
public class CloudStorageService
{
    public async Task<CloudUploadResult> UploadProfileAsync(EncryptedProfile profile, string userId)
    {
        await Task.Delay(100); // Simulate upload
        return new CloudUploadResult { Success = true, CloudUrl = $"https://cloud.ggs.com/profiles/{profile.ProfileId}", ProfileSize = 1024 };
    }

    public async Task<CloudDownloadResult> DownloadProfileAsync(Guid profileId, string userId)
    {
        await Task.Delay(100); // Simulate download
        return new CloudDownloadResult { Success = true, EncryptedData = new EncryptedProfile() };
    }

    public async Task<CloudDeleteResult> DeleteProfileAsync(Guid profileId, string userId)
    {
        await Task.Delay(50); // Simulate delete
        return new CloudDeleteResult { Success = true };
    }

    public async Task<UserProfileRegistry> GetUserProfileRegistryAsync(string userId)
    {
        await Task.Delay(50);
        return new UserProfileRegistry { UserId = userId };
    }

    public async Task UpdateUserProfileRegistryAsync(string userId, UserProfileRegistry registry)
    {
        await Task.Delay(50);
    }

    public async Task<List<CloudSearchResult>> SearchSharedProfilesAsync(ProfileSearchCriteria criteria)
    {
        await Task.Delay(100);
        return new List<CloudSearchResult>();
    }

    public async Task<SharedDownloadResult> DownloadSharedProfileAsync(Guid profileId)
    {
        await Task.Delay(100);
        return new SharedDownloadResult { Success = true, ProfileData = new CloudProfile() };
    }

    public async Task IncrementDownloadCountAsync(Guid profileId)
    {
        await Task.Delay(10);
    }
}

/// <summary>
/// Profile encryption service
/// </summary>
public class ProfileEncryption
{
    public async Task<EncryptedProfile> EncryptProfileAsync(CloudProfile profile, string userId)
    {
        await Task.Delay(50);
        return new EncryptedProfile { ProfileId = profile.ProfileId };
    }

    public async Task<CloudProfile> DecryptProfileAsync(EncryptedProfile encrypted, string userId)
    {
        await Task.Delay(50);
        return new CloudProfile { ProfileId = encrypted.ProfileId };
    }
}

/// <summary>
/// Sharing permission manager
/// </summary>
public class SharingPermissionManager
{
    public async Task SetSharingPermissionsAsync(Guid profileId, SharingPermission permission, List<string>? tags)
    {
        await Task.Delay(10);
    }

    public async Task RemoveSharingPermissionsAsync(Guid profileId)
    {
        await Task.Delay(10);
    }

    public async Task<SharingInfo?> GetSharingInfoAsync(Guid profileId)
    {
        await Task.Delay(10);
        return new SharingInfo { Permission = SharingPermission.Public };
    }
}

// Supporting classes for cloud operations
public class CloudUploadResult { public bool Success { get; set; } public string? ErrorMessage { get; set; } public string CloudUrl { get; set; } = string.Empty; public long ProfileSize { get; set; } }
public class CloudDownloadResult { public bool Success { get; set; } public string? ErrorMessage { get; set; } public EncryptedProfile EncryptedData { get; set; } = new(); }
public class CloudDeleteResult { public bool Success { get; set; } public string? ErrorMessage { get; set; } }
public class EncryptedProfile { public Guid ProfileId { get; set; } }
public class ProfileSearchCriteria { public string Query { get; set; } = string.Empty; public List<string> Tags { get; set; } = new(); public SharingPermission? Permission { get; set; } public int MaxResults { get; set; } public bool IncludeMetadata { get; set; } }
public class CloudSearchResult { public Guid ProfileId { get; set; } public string ProfileName { get; set; } = string.Empty; public string Description { get; set; } = string.Empty; public string CreatedBy { get; set; } = string.Empty; public DateTime CreatedAt { get; set; } public int TweakCount { get; set; } public int DownloadCount { get; set; } public double Rating { get; set; } public List<string> Tags { get; set; } = new(); public SystemInfo SystemCompatibility { get; set; } = new(); public List<DetectedTweak> PreviewTweaks { get; set; } = new(); }
public class SharedDownloadResult { public bool Success { get; set; } public string? ErrorMessage { get; set; } public CloudProfile ProfileData { get; set; } = new(); }
public class SharingInfo { public SharingPermission Permission { get; set; } }